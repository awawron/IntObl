import pygad
import random
import time

def generate_input(machine_count, job_count, random_length=False):
    re = []
    machine_count -= 1  # so there is n machines instead of n+1
    for i in range(job_count):
        job = []
        if random_length:
            length = random.randint(0, machine_count) + 1
            biggest = 0
            counter = 1
            for j in range(length):
                machine = random.randint(biggest, machine_count -
                                         length + counter)
                job.append((machine, random.randint(1, 20)))
                biggest = machine + 1
                counter += 1
        else:
            for j in range(machine_count):
                job.append((j, random.randint(1, 20)))

        re.append(job)

    return re

def process_output(output):
    machines = [[] for i in range(MACHINE_COUNT)]
    deducted_for_idle = 0

    for i in output:
        better_i = int(i)
        job_number = str(processed_input[better_i][0])
        machine_number = processed_input[better_i][1]
        machine = machines[machine_number]
        time = processed_input[better_i][2]

        for k in range(MACHINE_COUNT):
            fill_amount = 0
            if k == machine_number:
                pass
            elif len(machines[k]) > len(machine):
                idx = len(machine)
                for j in range(time):
                    if len(machines[k]) > idx + j and machines[k][idx + j] == job_number:
                        fill_amount = j + 1

            # deduct fitness for idle time
            deducted_for_idle += fill_amount
            for j in range(fill_amount):
                machine.append('N')

        for j in range(time):
            machine.append(job_number)

    return (deducted_for_idle, machines)

def fitness_func(solution, solution_idx):
    fitness = 0

    (idle, machines) = process_output(solution)

    # deduct fitness for idle time
    fitness -= idle
    # deduct a lot of fitness for the length of the entire process
    fitness -= 5 * len(max(machines, key=len))

    # for i in machines:
    #     print(i)
    # print(len(max(machines, key=len)))

    # print(fitness)

    return fitness

# 2 machines 5 jobs
input_s1 = [
    [(0, 3), (1, 3)],
    [(0, 5)],
    [(0, 2), (1, 2)],
    [(1, 5)],
    [(0, 4), (1, 3)]
]
# optimal for s1: 14

# 3 machines 3 jobs
input_s2 = [
    [(0, 53), (1, 21), (2, 34)],
    [(0, 21), (1, 71), (2, 26)],
    [(0, 42), (1, 31), (2, 12)]
]
# optimal for s2: 123

# 3 machines 3 jobs
input_s3 = [
    [(0, 3), (1, 2), (2, 2)],
    [(0, 2), (1, 4), (2, 1)],
    [(1, 4), (2, 3)]
]
# optimal for s3: 10

# 10 machines, 10 jobs
input_m1 = [
    [(0, 11), (1, 15), (2, 17), (3, 12), (4, 1), (5, 10), (6, 14), (7, 17), (8, 15), (9, 16)],
    [(0, 18), (1, 11), (2, 12), (3, 18), (4, 11), (5, 7), (6, 3), (7, 8), (8, 11), (9, 10)],
    [(0, 17), (1, 15), (2, 16), (3, 14), (4, 17), (5, 19), (6, 2), (7, 16), (8, 4), (9, 17)],
    [(0, 2), (1, 19), (2, 19), (3, 2), (4, 5), (5, 19), (6, 7), (7, 4), (8, 18), (9, 17)],
    [(0, 5), (1, 14), (2, 16), (3, 19), (4, 15), (5, 16), (6, 5), (7, 11), (8, 17), (9, 17)],
    [(0, 16), (1, 15), (2, 1), (3, 5), (4, 6), (5, 11), (6, 18), (7, 2), (8, 1), (9, 2)],
    [(0, 11), (1, 7), (2, 5), (3, 14), (4, 3), (5, 2), (6, 2), (7, 19), (8, 13), (9, 7)],
    [(0, 4), (1, 3), (2, 15), (3, 14), (4, 6), (5, 6), (6, 15), (7, 1), (8, 4), (9, 7)],
    [(0, 16), (1, 12), (2, 17), (3, 17), (4, 14), (5, 15), (6, 13), (7, 18), (8, 20), (9, 7)],
    [(0, 10), (1, 3), (2, 4), (3, 11), (4, 20), (5, 17), (6, 13), (7, 1), (8, 19), (9, 5)]

]
# 12 machines 8 jobs
input_m2 = [
    [(6, 16), (7, 7), (8, 15), (9, 17), (10, 7), (11, 9)],
    [(0, 7), (1, 5), (2, 16), (3, 6), (4, 5), (5, 3), (6, 7), (7, 9), (8, 4), (9, 1), (10, 16), (11, 1)],
    [(0, 15), (1, 8), (2, 12), (3, 19), (4, 12), (5, 12), (6, 17), (7, 13), (8, 12), (9, 5), (10, 18), (11, 16)],
    [(1, 4), (7, 6), (9, 18), (10, 17)],
    [(1, 6), (2, 18), (3, 1), (4, 9), (5, 8), (6, 6), (7, 16), (8, 13), (9, 9), (10, 6), (11, 19)],
    [(3, 19), (4, 7), (5, 16), (6, 20), (7, 4), (8, 9), (9, 9), (10, 14), (11, 17)],
    [(9, 7)],
    [(4, 8)]
]
# 10 machines 10 jobs
input_m3 = [
    [(8, 13), (9, 10)],
    [(0, 10)],
    [(4, 3), (8, 5)],
    [(1, 7), (2, 4), (3, 2), (6, 2), (7, 8), (8, 13), (9, 12)],
    [(6, 8), (7, 10), (9, 18)],
    [(2, 14), (3, 7), (4, 18), (5, 8), (6, 9), (7, 2), (8, 17), (9, 16)],
    [(0, 2), (5, 8), (7, 15), (8, 14), (9, 16)],
    [(0, 20), (2, 16), (3, 6), (4, 10), (5, 2), (6, 5), (7, 8), (8, 1), (9, 9)],
    [(5, 4), (6, 3), (7, 16), (8, 19), (9, 2)],
    [(2, 20)]
]
# 20 machines 20 jobs
input_l1 = [
    [(0, 16), (1, 5), (2, 4), (3, 1), (4, 15), (5, 3), (6, 1), (7, 4), (8, 10), (9, 18), (10, 5), (11, 18), (12, 20), (13, 14), (14, 5), (15, 10), (16, 15), (17, 5), (18, 12), (19, 10)],
    [(0, 9), (1, 8), (2, 2), (3, 16), (4, 14), (5, 14), (6, 2), (7, 17), (8, 13), (9, 16), (10, 5), (11, 20), (12, 17), (13, 6), (14, 5), (15, 14), (16, 6), (17, 7), (18, 2), (19, 4)],
    [(0, 16), (1, 17), (2, 7), (3, 7), (4, 9), (5, 6), (6, 11), (7, 16), (8, 5), (9, 20), (10, 20), (11, 18), (12, 2), (13, 2), (14, 10), (15, 8), (16, 5), (17, 12), (18, 16), (19, 6)],
    [(0, 6), (1, 18), (2, 1), (3, 15), (4, 20), (5, 5), (6, 14), (7, 6), (8, 4), (9, 18), (10, 14), (11, 6), (12, 4), (13, 10), (14, 19), (15, 3), (16, 9), (17, 12), (18, 4), (19, 19)],
    [(0, 5), (1, 1), (2, 10), (3, 20), (4, 19), (5, 5), (6, 16), (7, 8), (8, 6), (9, 8), (10, 4), (11, 16), (12, 7), (13, 9), (14, 2), (15, 13), (16, 20), (17, 1), (18, 11), (19, 20)],
    [(0, 20), (1, 8), (2, 18), (3, 18), (4, 12), (5, 9), (6, 17), (7, 15), (8, 7), (9, 13), (10, 7), (11, 15), (12, 15), (13, 4), (14, 7), (15, 5), (16, 13), (17, 7), (18, 5), (19, 18)],
    [(0, 14), (1, 16), (2, 16), (3, 15), (4, 1), (5, 18), (6, 7), (7, 15), (8, 8), (9, 1), (10, 8), (11, 1), (12, 7), (13, 10), (14, 20), (15, 19), (16, 13), (17, 1), (18, 8), (19, 2)],
    [(0, 6), (1, 7), (2, 19), (3, 19), (4, 16), (5, 9), (6, 14), (7, 8), (8, 5), (9, 2), (10, 10), (11, 8), (12, 17), (13, 5), (14, 12), (15, 19), (16, 15), (17, 12), (18, 19), (19, 5)],
    [(0, 19), (1, 13), (2, 5), (3, 7), (4, 20), (5, 9), (6, 4), (7, 16), (8, 16), (9, 10), (10, 19), (11, 17), (12, 19), (13, 6), (14, 11), (15, 16), (16, 2), (17, 6), (18, 16), (19, 5)],
    [(0, 6), (1, 12), (2, 10), (3, 12), (4, 7), (5, 9), (6, 4), (7, 5), (8, 10), (9, 17), (10, 13), (11, 8), (12, 10), (13, 4), (14, 10), (15, 12), (16, 14), (17, 8), (18, 2), (19, 17)],
    [(0, 18), (1, 11), (2, 19), (3, 15), (4, 17), (5, 10), (6, 7), (7, 17), (8, 19), (9, 7), (10, 10), (11, 20), (12, 12), (13, 19), (14, 8), (15, 18), (16, 5), (17, 19), (18, 18), (19, 2)],
    [(0, 12), (1, 10), (2, 6), (3, 5), (4, 6), (5, 19), (6, 11), (7, 6), (8, 18), (9, 4), (10, 20), (11, 4), (12, 18), (13, 9), (14, 15), (15, 17), (16, 13), (17, 15), (18, 18), (19, 11)],
    [(0, 2), (1, 19), (2, 3), (3, 9), (4, 7), (5, 20), (6, 8), (7, 10), (8, 18), (9, 10), (10, 8), (11, 12), (12, 5), (13, 16), (14, 13), (15, 11), (16, 19), (17, 15), (18, 16), (19, 4)],
    [(0, 2), (1, 9), (2, 20), (3, 15), (4, 2), (5, 11), (6, 9), (7, 8), (8, 8), (9, 11), (10, 19), (11, 10), (12, 2), (13, 2), (14, 1), (15, 2), (16, 19), (17, 9), (18, 13), (19, 9)],
    [(0, 10), (1, 13), (2, 16), (3, 12), (4, 14), (5, 3), (6, 7), (7, 17), (8, 18), (9, 20), (10, 18), (11, 4), (12, 19), (13, 15), (14, 8), (15, 11), (16, 14), (17, 2), (18, 5), (19, 16)],
    [(0, 12), (1, 13), (2, 16), (3, 2), (4, 7), (5, 11), (6, 9), (7, 8), (8, 11), (9, 5), (10, 20), (11, 19), (12, 17), (13, 3), (14, 6), (15, 10), (16, 5), (17, 1), (18, 13), (19, 20)],
    [(0, 8), (1, 6), (2, 17), (3, 7), (4, 8), (5, 10), (6, 20), (7, 12), (8, 18), (9, 11), (10, 15), (11, 10), (12, 19), (13, 10), (14, 14), (15, 7), (16, 19), (17, 2), (18, 1), (19, 9)],
    [(0, 12), (1, 6), (2, 15), (3, 6), (4, 7), (5, 7), (6, 3), (7, 12), (8, 16), (9, 3), (10, 11), (11, 15), (12, 15), (13, 10), (14, 2), (15, 13), (16, 16), (17, 14), (18, 10), (19, 19)],
    [(0, 15), (1, 20), (2, 6), (3, 12), (4, 2), (5, 8), (6, 4), (7, 18), (8, 8), (9, 6), (10, 20), (11, 15), (12, 7), (13, 9), (14, 5), (15, 18), (16, 17), (17, 11), (18, 8), (19, 5)],
    [(0, 5), (1, 14), (2, 18), (3, 14), (4, 4), (5, 20), (6, 1), (7, 10), (8, 19), (9, 15), (10, 20), (11, 3), (12, 6), (13, 5), (14, 6), (15, 13), (16, 6), (17, 11), (18, 20), (19, 13)]
]
# 20 machines 30 jobs
input_l2 = [
    [(1, 8), (9, 4), (11, 16), (12, 15), (13, 7), (14, 3), (15, 6), (16, 17), (17, 19), (18, 4), (19, 16)],
    [(4, 12), (6, 14), (7, 6), (8, 20), (9, 6), (10, 9), (11, 20), (12, 10), (13, 2), (14, 8), (15, 4), (16, 16), (17, 3), (18, 2), (19, 15)],
    [(0, 4), (1, 11), (7, 16), (10, 9), (13, 11), (15, 14), (16, 2), (17, 11), (19, 6)],
    [(0, 17), (2, 16), (3, 20), (4, 13), (6, 2), (8, 11), (9, 16), (10, 15), (11, 3), (12, 3), (13, 13), (14, 11), (15, 17), (16, 8), (17, 8), (18, 18), (19, 5)],
    [(1, 19), (3, 5), (8, 12), (10, 7), (11, 19), (12, 11), (13, 8), (14, 9), (15, 6), (16, 6), (17, 10), (18, 10), (19, 19)],
    [(19, 10)],
    [(13, 7), (19, 20)],
    [(0, 20), (5, 2), (6, 9), (8, 8), (9, 1), (10, 3), (11, 13), (12, 12), (13, 19), (14, 20), (15, 4), (16, 17), (17, 3), (18, 6), (19, 9)],
    [(7, 19), (8, 8), (11, 20), (12, 15), (13, 3), (14, 16), (15, 15), (16, 6), (17, 20), (18, 13), (19, 19)],
    [(8, 10), (9, 20), (10, 8), (11, 17), (12, 9), (13, 19), (14, 12), (15, 19), (16, 10), (17, 8), (18, 10), (19, 5)],
    [(3, 13), (6, 10), (9, 3), (11, 8), (12, 1), (13, 10), (14, 14), (15, 10), (16, 7), (17, 16), (18, 17), (19, 16)],
    [(16, 9)],
    [(6, 1), (7, 11), (15, 8), (16, 5), (17, 18), (18, 6), (19, 1)],
    [(12, 13), (13, 7), (14, 13), (15, 20), (16, 15), (17, 15), (18, 17), (19, 11)],
    [(2, 9), (3, 1), (5, 4), (8, 4), (9, 12), (10, 13), (11, 9), (12, 4), (13, 10), (14, 14), (15, 20), (16, 11), (17, 2), (18, 7), (19, 18)],
    [(19, 6)],
    [(0, 17), (1, 17), (2, 1), (3, 20), (4, 8), (5, 16), (6, 14), (7, 11), (8, 4), (9, 18), (10, 2), (11, 14), (12, 14), (13, 7), (14, 15), (15, 4), (16, 17), (17, 2), (18, 6), (19, 18)],
    [(0, 5), (2, 13), (4, 8), (7, 7), (8, 19), (9, 11), (10, 4), (11, 1), (12, 13), (13, 13), (14, 19), (15, 7), (16, 12), (17, 20), (18, 20), (19, 19)],
    [(5, 6), (6, 5), (7, 3), (8, 19), (9, 4), (10, 3), (11, 7), (12, 1), (13, 1), (14, 20), (15, 11), (16, 11), (17, 19), (18, 18), (19, 8)],
    [(0, 14), (1, 4), (2, 15), (3, 1), (4, 1), (5, 4), (6, 6), (7, 2), (8, 16), (9, 10), (10, 18), (11, 13), (12, 3), (13, 8), (14, 8), (15, 14), (16, 8), (17, 11), (18, 9), (19, 17)],
    [(4, 4), (13, 15), (14, 7), (15, 14), (16, 10), (17, 1), (18, 18), (19, 10)],
    [(4, 10), (6, 13), (9, 11), (10, 6), (11, 20), (12, 18), (13, 20), (14, 16), (15, 3), (16, 1), (17, 4), (18, 10), (19, 18)],
    [(2, 15), (3, 17), (5, 7), (7, 9), (10, 15), (11, 11), (14, 6), (15, 3), (16, 5), (17, 12), (18, 6), (19, 5)],
    [(1, 18), (2, 12), (4, 6), (5, 2), (6, 4), (7, 7), (8, 8), (9, 1), (10, 4), (11, 3), (12, 16), (13, 7), (14, 11), (15, 7), (16, 4), (17, 6), (18, 9), (19, 7)],
    [(14, 6), (16, 20), (17, 14), (18, 16), (19, 15)],
    [(7, 10), (14, 9), (15, 16), (16, 15), (17, 5), (18, 2), (19, 17)],
    [(3, 5), (4, 15), (5, 12), (6, 6), (7, 12), (8, 2), (9, 10), (10, 20), (11, 9), (12, 4), (13, 7), (14, 19), (15, 3), (16, 17), (17, 8), (18, 14), (19, 4)],
    [(10, 2), (11, 9), (12, 15), (13, 20), (14, 6), (15, 8), (16, 19), (17, 1), (18, 13), (19, 8)],
    [(6, 3), (7, 15), (9, 5), (11, 8), (12, 18), (13, 19), (14, 8), (15, 2), (16, 7), (17, 19), (18, 8), (19, 8)],
    [(13, 2), (14, 19)]
]
# 20 machines 20 jobs
input_l3 = [
    [(4, 14), (5, 11), (6, 11), (8, 20), (10, 3), (11, 3), (12, 6), (13, 12), (14, 17), (15, 6), (16, 6), (17, 13), (18, 19), (19, 7)],
    [(10, 7), (11, 9), (12, 10), (13, 13), (14, 3), (15, 20), (16, 12), (17, 9), (18, 1), (19, 7)],
    [(0, 8), (1, 18), (2, 8), (3, 9), (4, 8), (5, 19), (6, 13), (7, 16), (8, 1), (9, 13), (10, 11), (11, 13), (12, 10), (13, 2), (14, 15), (15, 17), (16, 15), (17, 6), (18, 12), (19, 15)],
    [(1, 9), (2, 19), (3, 16), (4, 9), (6, 7), (7, 17), (8, 9), (9, 18), (10, 3), (11, 19), (12, 6), (13, 6), (14, 1), (15, 16), (16, 1), (17, 9), (18, 11), (19, 12)],
    [(12, 3), (13, 7), (19, 11)],
    [(2, 17), (5, 13), (6, 9), (8, 15), (9, 18), (10, 13), (11, 7), (12, 9), (13, 20), (14, 6), (15, 18), (16, 16), (17, 7), (18, 3), (19, 3)],
    [(1, 17), (9, 14), (11, 10), (13, 1), (14, 7), (15, 10), (16, 12), (17, 17), (18, 12), (19, 6)],
    [(4, 13), (8, 9), (12, 5), (15, 1), (16, 6), (17, 18), (18, 5), (19, 12)],
    [(17, 6), (18, 17)],
    [(8, 4), (10, 7), (12, 2), (13, 17), (14, 1), (15, 19), (16, 10), (17, 16), (18, 11), (19, 11)],
    [(8, 3), (13, 14), (17, 19), (18, 15), (19, 4)],
    [(9, 6), (16, 14), (18, 18), (19, 5)],
    [(1, 9), (3, 7), (4, 7), (5, 19), (6, 17), (7, 14), (8, 3), (9, 16), (10, 6), (11, 1), (12, 14), (13, 12), (14, 20), (15, 11), (16, 2), (17, 7), (18, 13), (19, 6)],
    [(1, 7), (2, 5), (3, 16), (4, 15), (5, 2), (6, 9), (7, 5), (8, 3), (9, 20), (10, 18), (11, 20), (12, 11), (13, 13), (14, 15), (15, 4), (16, 8), (17, 14), (18, 6), (19, 20)],
    [(0, 6), (10, 12), (11, 4), (12, 19), (13, 4), (14, 5), (15, 6), (16, 7), (17, 17), (18, 7), (19, 12)],
    [(0, 20), (2, 12), (4, 1), (5, 9), (10, 4), (12, 13), (14, 3), (15, 10), (16, 15), (17, 1), (18, 10), (19, 5)],
    [(8, 13), (9, 8), (10, 15), (11, 11), (12, 8), (13, 19), (14, 6), (15, 3), (16, 13), (17, 18), (18, 6), (19, 6)],
    [(1, 20), (5, 19), (12, 20), (13, 7), (16, 13), (18, 12), (19, 12)],
    [(16, 16), (18, 7)],
    [(3, 3), (10, 16), (13, 16), (14, 20), (15, 13), (16, 19), (17, 18), (18, 9), (19, 11)]
]

small = [(input_s1, 2), (input_s2, 3), (input_s3, 3)]
medium = [(input_m1, 10), (input_m2, 12), (input_m3, 10)]
large = [(input_l1, 20), (input_l2, 20), (input_l3, 20)]

chosen = []
results = []
times = []

for nothing in range(1):

    random_idx = random.randint(0, 2)
    CHOSEN_INPUT = small[random_idx][0]
    MACHINE_COUNT = small[random_idx][1]

    chosen.append(random_idx)

    start = time.time()
    job_count = 0
    for i in CHOSEN_INPUT:
        job_count += len(i)

    processed_input = []

    for i in range(len(CHOSEN_INPUT)):
        for j in range(len(CHOSEN_INPUT[i])):
            processed_input.append(
                (i, CHOSEN_INPUT[i][j][0], CHOSEN_INPUT[i][j][1]))

    gene_space = range(job_count)

    # ile chromsomów w populacji
    # ile genow ma chromosom
    sol_per_pop = 50
    num_genes = job_count

    # ile wylaniamy rodzicow do "rozmanazania" (okolo 50% populacji)
    # ile pokolen
    # ilu rodzicow zachowac (kilka procent)
    num_parents_mating = 25
    num_generations = 500
    keep_parents = 3

    # jaki typ selekcji rodzicow?
    # sss = steady, rws=roulette, rank = rankingowa, tournament = turniejowa
    parent_selection_type = "sss"

    # w il =u punktach robic krzyzowanie?
    crossover_type = "single_point"

    # mutacja ma dzialac na ilu procent genow?
    # trzeba pamietac ile genow ma chromosom
    mutation_type = "random"
    mutation_percent_genes = 12

    fitness_function = fitness_func

    # inicjacja algorytmu z powyzszymi parametrami wpisanymi w atrybuty
    ga_instance = pygad.GA(
        gene_space=gene_space,
        num_generations=num_generations,
        num_parents_mating=num_parents_mating,
        fitness_func=fitness_function,
        sol_per_pop=sol_per_pop,
        num_genes=num_genes,
        parent_selection_type=parent_selection_type,
        keep_parents=keep_parents,
        crossover_type=crossover_type,
        mutation_type=mutation_type,
        mutation_percent_genes=mutation_percent_genes,
        allow_duplicate_genes=False
    )

    # uruchomienie algorytmu
    ga_instance.run()

    end = time.time()

    # podsumowanie: najlepsze znalezione rozwiazanie (chromosom+ocena)
    solution, solution_fitness, solution_idx = ga_instance.best_solution()
    print("Parameters of the best solution : {solution}".format(solution=solution))
    print("Fitness value of the best solution = {solution_fitness}".format(
        solution_fitness=solution_fitness))


    solution_vis = process_output(solution)[1]
    print("Machine and job visualization:")
    for i in solution_vis:
        print(i)

    length = len(max(solution_vis, key=len))
    print("Length of all the jobs: {len}".format(len=length))

    # wyswietlenie wykresu: jak zmieniala sie ocena na przestrzeni pokolen
    # ga_instance.plot_fitness()


    results.append(length)
    times.append(end - start)
    print(nothing)

# with open("result.txt", "w") as f:
#     f.write(str(chosen))
#     f.write("\n\n")
#     f.write(str(results))
#     f.write("\n\n")
#     f.write(str(times))